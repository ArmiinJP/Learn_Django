تفاوت library , framwork : کتابخانه را صرفا import میکنیم و کد میزنیم، ولی framwork به ما چارچوب کد زنی را هم مشخص میکنه.
خب model یک ساختار و لایه برای ارتباط با دیتابیس هست

فایل __init__ در پوشه‌ها نشان میده که یک این پوشه یک پکیج پایتونی هست.
اسم app ها را با حروف کوچیک و پشت هم یادداشت کنید بدون ـ گذاشتن.

اون بحث BASE_DIR در setting جالبه بعد سرچش کن
دستور زیر خطای در مرورگر را نشان میده یا نمیده حواست باشه اگه میخوای ببری تو پروداکشن حتما باید مقدارش را False کنی.
DEBUG = True
بخش ALLOWED_HOSTS را هم حواست باشه که بعدا تو پردوداکشن میگی کیا اوکین
ALLOWED_HOSTS = ['*']
خب TIME_ZONE را هم بکن Asia/Tehran و بعد USE_I18N و USE_TZ را هر دو تا True کن.
در بخش DATABASE میاد نوع database را مشخص میکنی

در DEFAULT_AUTO_FIELD منظورش اضافه کردن فیلد اتوماتیک و increament خودکارش هست که به همون فیلد id که اتوماتیک جنگو به هر مدلی اضافه میکنه اشاره داره. و منحصر به فرد هست برای هر فیلد، خود من هم میتونم چنین چیزی اگه لازم داشتم ایجاد کنم. ضمنا این فیلد را به عنوان pk در نظر میگیره.
---------------------------
توجه : چه برای migrate کردن model های یک اپ چه برای فرستادن به صفحه ی ادمین باید حتما قبلش app ام را به installed_app در تنظیمات اضافه کرده باشم.

اسم model را با حرف اول بزرگ و بعد مفرد انتخاب میکنیم.
from django.db import models
خب migration ها یک سری کد پایتونی هستند که دیتابیس را میسازند  
با migrate کردن اولیه کلیه‌ی اپهای خود جنگو تیکشون فعال میشه.
با زدن makemigrations ماگریشن مدلهایی که تغییر کرده ساخته میشه و بعد با migration اعمال میشه.
با دستور showmigrations میشه دید کدام migrate ها اعمال شدند در دیتابیس، که خب این migrate کمک میکرد که اینها اعمال بشند و تیکشون فعال بشه.

چطوری جدولی که با model ساختم  را ببینمش؟ کافیه در admin.py برم و دستور زیر را بزنم:
admin.site.register(Post)
کوچکترین تغییر در model دادی بلافاصله makemigration را بزن که تبدیل مدل به ساختار دیتابیس را اوکی کنه و برای اعمال در دیتابیس هم migrate را بزن
---------------------------
برای این که به محیط پایتون به شکلی که setting.py پروژت درش اعمال شده دسترسی بگیری از mange.py shell استفاده کن. اگه این کار و کنی راحت میتونی به منابع پروژت دسترسی داشته باشی

گفتم objects رابط بین شما و دیتابیس هست. به همین اصطلاحا میگند ORM، داریم با دیتابیس صحبت میکنیم بدون اینکه نیاز باشه اصن بدونیم دیتابیس چی هست و اصن چطوری کوئری میگیره.

بحث object.filter میاد اون ردیف هایی که اون ويژگی را داشته باشند برمیگردونه.
--------------------------
ریسپانس دو شکل داریم،‌صفحه‌ی html کامل سمت سرور آماده بشه و بعد سمت کلاینت برگردونده بشه، یعنی مثلا کاربر به اون صفحه‌ی خاص html که مال وبسایت هست ریدایرکت بشه

روش دوم این هست که با استفاده از API های restful باشه. یک ریکوئست میاد یک پردازش انجام میشه و یک ریسپانس از سرور برمیگرده، که حالا یا به صورت xml هست یا به صورت json هست و.. و اینجاست که کلاینت خودش میاد این ریسپانس را پردازش میکنه و نمایش میده، این که میبینید یک سایت هم وب اپ داره هم اپلیکیشن ، اینا دارن از api کمک میگیرند، یعنی کاری ندارن کی داره ریکوئست میفرسته، فارق از جنس کلاینتی که داره درخواست ارسال میکنه، اونا پاسخ را تحت api از سرور برمیگردوند، دیگه این که کلاینت چی باشه و چطور پردازش کنه با خودشه.
--------------------------
خب template یک بیس سادست که شما میتونید یکبار درستش کنید و مقادیر مختلف را درش جایگزاری کنید.
در واقع فرق استاتیک بودن صفحات وب و داینامیک بودن اینجاست، یک زمانی فقط استاتیک بود که چرت بود،‌الان صفحه را در قالب تمپلیت میزنند و خب میتونند مقادیر مختلف را بهش بدند که خروجی های مختلفی را نشون بده.


