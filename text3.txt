تفاوت library , framwork : کتابخانه را صرفا import میکنیم و کد میزنیم، ولی framwork به ما چارچوب کد زنی را هم مشخص میکنه.
خب model یک ساختار و لایه برای ارتباط با دیتابیس هست

فایل __init__ در پوشه‌ها نشان میده که یک این پوشه یک پکیج پایتونی هست.
اسم app ها را با حروف کوچیک و پشت هم یادداشت کنید بدون ـ گذاشتن.

اون بحث BASE_DIR در setting جالبه بعد سرچش کن
دستور زیر خطای در مرورگر را نشان میده یا نمیده حواست باشه اگه میخوای ببری تو پروداکشن حتما باید مقدارش را False کنی.
DEBUG = True
بخش ALLOWED_HOSTS را هم حواست باشه که بعدا تو پردوداکشن میگی کیا اوکین
ALLOWED_HOSTS = ['*']
خب TIME_ZONE را هم بکن Asia/Tehran و بعد USE_I18N و USE_TZ را هر دو تا True کن.
در بخش DATABASE میاد نوع database را مشخص میکنی

در DEFAULT_AUTO_FIELD منظورش اضافه کردن فیلد اتوماتیک و increament خودکارش هست که به همون فیلد id که اتوماتیک جنگو به هر مدلی اضافه میکنه اشاره داره. و منحصر به فرد هست برای هر فیلد، خود من هم میتونم چنین چیزی اگه لازم داشتم ایجاد کنم. ضمنا این فیلد را به عنوان pk در نظر میگیره.
---------------------------
توجه : چه برای migrate کردن model های یک اپ چه برای فرستادن به صفحه ی ادمین باید حتما قبلش app ام را به installed_app در تنظیمات اضافه کرده باشم.

اسم model را با حرف اول بزرگ و بعد مفرد انتخاب میکنیم.
from django.db import models
خب migration ها یک سری کد پایتونی هستند که دیتابیس را میسازند  
با migrate کردن اولیه کلیه‌ی اپهای خود جنگو تیکشون فعال میشه.
با زدن makemigrations ماگریشن مدلهایی که تغییر کرده ساخته میشه و بعد با migration اعمال میشه.
با دستور showmigrations میشه دید کدام migrate ها اعمال شدند در دیتابیس، که خب این migrate کمک میکرد که اینها اعمال بشند و تیکشون فعال بشه.

چطوری جدولی که با model ساختم  را ببینمش؟ کافیه در admin.py برم و دستور زیر را بزنم:
admin.site.register(Post)
کوچکترین تغییر در model دادی بلافاصله makemigration را بزن که تبدیل مدل به ساختار دیتابیس را اوکی کنه و برای اعمال در دیتابیس هم migrate را بزن
---------------------------
برای این که به محیط پایتون به شکلی که setting.py پروژت درش اعمال شده دسترسی بگیری از mange.py shell استفاده کن. اگه این کار و کنی راحت میتونی به منابع پروژت دسترسی داشته باشی

گفتم objects رابط بین شما و دیتابیس هست. به همین اصطلاحا میگند ORM، داریم با دیتابیس صحبت میکنیم بدون اینکه نیاز باشه اصن بدونیم دیتابیس چی هست و اصن چطوری کوئری میگیره.

بحث object.filter میاد اون ردیف هایی که اون ويژگی را داشته باشند برمیگردونه.
--------------------------
ریسپانس دو شکل داریم،‌صفحه‌ی html کامل سمت سرور آماده بشه و بعد سمت کلاینت برگردونده بشه، یعنی مثلا کاربر به اون صفحه‌ی خاص html که مال وبسایت هست ریدایرکت بشه

روش دوم این هست که با استفاده از API های restful باشه. یک ریکوئست میاد یک پردازش انجام میشه و یک ریسپانس از سرور برمیگرده، که حالا یا به صورت xml هست یا به صورت json هست و.. و اینجاست که کلاینت خودش میاد این ریسپانس را پردازش میکنه و نمایش میده، این که میبینید یک سایت هم وب اپ داره هم اپلیکیشن ، اینا دارن از api کمک میگیرند، یعنی کاری ندارن کی داره ریکوئست میفرسته، فارق از جنس کلاینتی که داره درخواست ارسال میکنه، اونا پاسخ را تحت api از سرور برمیگردوند، دیگه این که کلاینت چی باشه و چطور پردازش کنه با خودشه.
--------------------------
خب template یک بیس سادست که شما میتونید یکبار درستش کنید و مقادیر مختلف را درش جایگزاری کنید.
در واقع فرق استاتیک بودن صفحات وب و داینامیک بودن اینجاست، یک زمانی فقط استاتیک بود که چرت بود،‌الان صفحه را در قالب تمپلیت میزنند و خب میتونند مقادیر مختلف را بهش بدند که خروجی های مختلفی را نشون بده.

------------------------
خب class based view ها خیلی بهترند چرا که از نوشتن کدهای اضافی در functaion baseed ها نجاتمون میدند.
from django.views import generic
هر کلاسی که تعریف میکنی که میخوای از class based ها ارث بری کند، سه تا مولفه هست که میتونی مقدار بدی:
یک queryset : که میگه کوئری چیه (مثلا Post.ojects.all)
دو template_name (اسم تمپلیتی که میخوای رندر بشه)
سه context_object_name ( اسم کلید های دیکشنری context که میخوای در صفحه‌ی رندر شده ازشون استفاده کنی)

در نهایت موقع صدا زدن در  ulrs.py هم چون اینجا کلاس داشتیم، باید برای یک تابع viwe بفرستی لذا باید از اسم کلاس view بعدش دات و as_view استفاده کنی:
path('posts/', Postlist.as_view())
-------------------------------
بحث orm در جنگو:
اون منیجره کار و جمع میکنه که یک نمونش را هم خودمون نوشتیم:
class PostLiveManager(models.Manager):
    def get_queryset(self):
        queryset = super().get_queryset()
        # اضافه کردن یک فیلتر بیشتر
        queryset = queryset.filter(is_enable=False)
        return queryset
-------------------------------
بحث API
یک سری معماری داریم،‌مثل REST , Soap 
و یک سری روش داریم، مثل Json یا xml که ساختار اون فایلی هست که داره جا به جا میشه. که خب خوانایی و حجمش خیلی بهتر هست.
کلاینت و سرور در ساختار json که خیلی شبیه به دیکشنری در پایتون هست با هم پیامهاشون را رد و بدل میکنند. در json همه‌ی key ها به صورت string هستند ولی value ها میتوانند از جنس های مختلف باشند. عکس خوب دیتا تایپدها در josn و پایتون
حالا کلاینت متناسب با همون تکنولوژی ای که داره میاد این پیام ساختار مند را میخونه و رندرینگ را انجام میده.
و در این بحث دیگه رندرینگ سمت سرور قرار نداره، سرور میاد صرفا ریسپانس تحت قالب یک ساختار مشخص ارسال میکنه،‌ دیگه نحوه‌‌ی نمایش و برخورد با این ریسپانس به کلاینت ها و تکنولوژ‌ی‌هایی که در اون هست برمیگرده.

بحثی که اهمیت داره برای رد و بدل کردن پیام در شبکه، باید بتوان دیتا تایپ موجود در زبان برنامه نویسی را به josn تبدیل کرد،‌و برعکس این قضیه هم یعنی اگر دیتای josn ای آمد بتوان به دیتا تایپ زبان تبدیل کرد که بتوان با آن در زبان کار کرد، 
در عمل به تبدیل دیتاتایپ زبان برنامه نویسی به فرمت josn میگند serialized کردن، و به عکس این عمل یعنی تبدیل فرمت json به دیتاتایپ زبان میگند ، deserialized کردن.
مثلا برای انتقال به دیتا بیس یا انتقال به فایل، لازم هست اول دیتا serialized بشه، و وقتی میخواد این دیتا خوانده بشه و عملیات روش صورت بگیره باید desrialized بشه.

این جداسازی کلاینت و سرور فوق‌العادست، این که ما تمپلیت داشتیم این تو اون بود خیلی چرته

----------------------------
یک فریمورک خیلی خوب برای نوشتن api در جنگو توسعه داده شده که میاد روی جنگو میشینه و خیلی از کارها را برای ما اوکی میکنه. به اسم django rest framwork

تردپارتیهایی که روی جنگو نصب میشند، به تنهایی نمیتونید با pip نصبشون کنید، باید اول جنگو را نصب کنید، بعد اینا را
وقتی نصبش کردی، باید به INSTalled app ها در setting اضافش کنی، یعنی 'rest_framework' را باید اضافه کنی، بعد اینکار دیگه میتونی با import کردن اونهاییش که میخوای از view ها ریسپانسهای rest framework استفاده کنید
from rest_framework.decorators import api_view
from rest_framework.response import Response
ببینید میشه مثلا از ریپانسهای جنگو مثل :
 from django.http import HttpResponse , HttpReponseRedirect, ...
 اینا استفاده کرد، ولی بعدا اون بحث serialize کردن و ایناش باز مشکله، چون ریسپانسی که دارن اینا برمیگردونند تحت اون فرمت json مورد نظر نیست،‌صرفا یک ریسپانس مثلا http هست، ولی وقتی از ریسپانس این فریمورک استفاده کنیم اونا را هم اوکی میکنه و تحت اون فرمت ریپانس میده

برای اینکه viewهایی که داشتیم را تبدیلش کنیم به api کافیه دکوراتور api_view@ را قبلش اضافه کنیم و در ارگومان هم این که چه متودهایی از بین get , post ,... اینا برای این api کار میکنه را بفرستیم.
و در جواب هم کافیه return Response("matn") را بفرستستم
@api_view('GET')
def index(request)
	return Response({"name": "armin"})
